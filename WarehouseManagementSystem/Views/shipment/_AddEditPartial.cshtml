@model WarehouseManagementSystem.ViewModels.ShipmentVM

<link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet" />

<form asp-action="@(Model.Id == null ? "SubmitAdd" : "SubmitUpdate")" method="post" id="shipment-form">
    @Html.AntiForgeryToken()

    @if (Model.Id != null)
    {
        <input type="hidden" asp-for="Id" />
    }

    <div class="mb-3">
        <label class="form-label">Номер</label>
        <input asp-for="Number" class="form-control" />
        <span asp-validation-for="Number" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label class="form-label">Дата</label>
        <input asp-for="Date" type="date" class="form-control" />
        <span asp-validation-for="Date" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label class="form-label">Клиент</label>
        <select asp-for="ClientId" asp-items="Model.ClientList" class="form-select"></select>
        <span asp-validation-for="ClientId" class="text-danger"></span>
    </div>

    <table class="table table-bordered">
        <thead>
            <tr>
                <th>
                    <button type="button" class="btn btn-outline-primary Btn-Add" onclick="addNewRow()">
                        <span class="material-symbols-outlined">add</span>
                    </button>
                </th>
                <th>Ресурс</th>
                <th>Единица</th>
                <th>Количество</th>
                <th>Доступно</th>
            </tr>
        </thead>
        <tbody id="shipment-items">
            @for (int i = 0; i < Model.Items.Count; i++)
            {
                <tr>
                    <td class="tdCenterItems">
                        <button type="button" class="btn btn-outline-danger Btn-Add" onclick="removeRow(this)">
                            <span class="material-symbols-outlined">delete</span>
                        </button>
                    </td>
                    <td>
                        <span asp-validation-for="Items[@i].ResourceId" class="text-danger"></span>
                        <select asp-for="Items[@i].ResourceId" asp-items="Model.ResourceList" class="form-select resource-select" onchange="updateAvailableQuantity(this)"></select>
                    </td>
                    <td>
                        <span asp-validation-for="Items[@i].UnitId" class="text-danger"></span>
                        <select asp-for="Items[@i].UnitId" asp-items="Model.UnitList" class="form-select unit-select" onchange="updateAvailableQuantity(this)"></select>
                    </td>
                    <td>
                        <span asp-validation-for="Items[@i].Quantity" class="text-danger"></span>
                        <input asp-for="Items[@i].Quantity" class="form-control quantity-input" type="number" step="0.01" min="0.01" />
                    </td>
                    <td class="available-quantity">
                        0.00
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="mt-3">
        <button type="submit" class="btn rounded-pill btn-outline-primary" id="submit-shipment-btn">Сохранить</button>
    </div>
</form>


<script>
    const resourceOptions = `@Html.Raw(string.Join("", Model.ResourceList.Select(r => $"<option value='{r.Value}'>{r.Text}</option>")))`;
    const unitOptions = `@Html.Raw(string.Join("", Model.UnitList.Select(u => $"<option value='{u.Value}'>{u.Text}</option>")))`;
    
    
    function addNewRow() {
        
        const index = $("#shipment-items tr").length;
        
        const row = `
            <tr>
                <td class="tdCenterItems">
                    <button type="button" class="btn btn-outline-danger Btn-Add" onclick="removeRow(this)">
                        <span class="material-symbols-outlined">delete</span>
                    </button>
                </td>
                <td>
                    <select name="Items[${index}].ResourceId" class="form-select resource-select" onchange="updateAvailableQuantity(this)">
                        ${resourceOptions}
                    </select>
                </td>
                <td>
                    <select name="Items[${index}].UnitId" class="form-select unit-select" onchange="updateAvailableQuantity(this)">
                        ${unitOptions}
                    </select>
                </td>
                <td>
                    <input name="Items[${index}].Quantity" class="form-control quantity-input" type="number" step="0.01" min="0.01" />
                </td>
                <td class="available-quantity">
                    0.00
                </td>
            </tr>`;
        $("#shipment-items").append(row);
        
        addDefaultOption($("#shipment-items tr:last .resource-select"), "Выберите ресурс");
        addDefaultOption($("#shipment-items tr:last .unit-select"), "Выберите единицу");
    }



    function removeRow(btn) {
        
        $(btn).closest("tr").remove();
    }



    async function updateAvailableQuantity(selectElement) {
        const row = $(selectElement).closest('tr');
        const resourceId = row.find('.resource-select').val();
        const unitId = row.find('.unit-select').val();
        if (resourceId && unitId) {
            try {
                const response = await fetch(`/shipment/getAvailableQuantity?resourceId=${resourceId}&unitId=${unitId}`);
                const data = await response.json();
                row.find('.available-quantity').text(data.availableQuantity.toFixed(2));
                row.find('.quantity-input').attr('max', data.availableQuantity);
            } 
            catch (error)
            {
                console.error('Error fetching available quantity:', error);
                row.find('.available-quantity').text('0.00');
            }
        } 
        else 
        {
            row.find('.available-quantity').text('0.00');
        }
    }    



    function addDefaultOption(selectElement, defaultText) {
        const defaultOption = new Option(defaultText, "");
        defaultOption.selected = true;
        defaultOption.disabled = true;
        selectElement.prepend(defaultOption);
    }




    $(document).ready(function() {
        $('.resource-select').each(function() {
            addDefaultOption(this, "Выберите ресурс");
        });
        $('.unit-select').each(function() {
            addDefaultOption(this, "Выберите единицу");
        });
        addDefaultOption($('#ClientId')[0], "Выберите клиента");
    });
</script>
